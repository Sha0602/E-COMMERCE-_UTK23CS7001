{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DELETE_REQUEST, PRODUCT_DELETE_SUCCESS, PRODUCT_DELETE_FAIL, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_SUCCESS, PRODUCT_CREATE_FAIL, PRODUCT_CREATE_RESET, PRODUCT_UPDATE_REQUEST, PRODUCT_UPDATE_SUCCESS, PRODUCT_UPDATE_FAIL, PRODUCT_UPDATE_RESET, PRODUCT_CREATE_REVIEW_REQUEST, PRODUCT_CREATE_REVIEW_SUCCESS, PRODUCT_CREATE_REVIEW_FAIL, PRODUCT_CREATE_REVIEW_RESET, PRODUCT_TOP_REQUEST, PRODUCT_TOP_SUCCESS, PRODUCT_TOP_FAIL } from '../constants/productConstants';\n\n// productListReducer for all products\nexport const productListReducer = (state = {\n  products: []\n}, action) => {\n  switch (action.type) {\n    // Requests product list\n    // products is an empty array because its still loading\n    // loading will NOT be done yet, so true\n    case PRODUCT_LIST_REQUEST:\n      return {\n        loading: true,\n        products: []\n      };\n\n    // On success\n    // products will contain data as a payload\n    // loading will be done, so false\n    case PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload.products,\n        pages: action.payload.pages,\n        page: action.payload.page\n      };\n\n    // On fail\n    // products will contain the error as a payload\n    // loading will be done, so false\n    case PRODUCT_LIST_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    // In any other case, just return the state\n    default:\n      return state;\n  }\n};\n\n// productDetailsReducer for a single product\nexport const productDetailsReducer = (state = {\n  product: {\n    reviews: []\n  }\n}, action) => {\n  switch (action.type) {\n    // Requests a product\n    // product is an empty object because its still loading\n    // reviews is an empty array because its still loading\n    // loading will NOT be done yet, so true\n    // add contents of state using a spread operator (...)\n    case PRODUCT_DETAILS_REQUEST:\n      return {\n        loading: true,\n        ...state\n      };\n\n    // On success\n    // product will contain data as a payload\n    // loading will be done, so false\n    case PRODUCT_DETAILS_SUCCESS:\n      return {\n        loading: false,\n        product: action.payload\n      };\n\n    // On fail\n    // product will contain the error as a payload\n    // loading will be done, so false\n    case PRODUCT_DETAILS_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    // In any other case, just return the state\n    default:\n      return state;\n  }\n};\n// productDeleteReducer for admin users\nexport const productDeleteReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_DELETE_REQUEST:\n      return {\n        loading: true\n      };\n\n    // On success\n    // loading will be done, so false\n    case PRODUCT_DELETE_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n    case PRODUCT_DELETE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    // In any other case, just return the state\n    default:\n      return state;\n  }\n};\n// productCreateReducer for admin users\nexport const productCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_CREATE_REQUEST:\n      return {\n        loading: true\n      };\n\n    // On success\n    // loading will be done, so false\n    case PRODUCT_CREATE_SUCCESS:\n      return {\n        loading: false,\n        success: true,\n        product: action.payload\n      };\n\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n    case PRODUCT_CREATE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    case PRODUCT_CREATE_RESET:\n      return {};\n\n    // In any other case, just return the state\n    default:\n      return state;\n  }\n};\n// productUpdateReducer for admin users\nexport const productUpdateReducer = (state = {\n  product: {}\n}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_UPDATE_REQUEST:\n      return {\n        loading: true\n      };\n\n    // On success\n    // loading will be done, so false\n    case PRODUCT_UPDATE_SUCCESS:\n      return {\n        loading: false,\n        success: true,\n        product: action.payload\n      };\n\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n    case PRODUCT_UPDATE_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    case PRODUCT_UPDATE_RESET:\n      return {\n        product: {}\n      };\n\n    // In any other case, just return the state\n    default:\n      return state;\n  }\n};\n// productReviewCreateReducer for logged in users\nexport const productReviewCreateReducer = (state = {}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_CREATE_REVIEW_REQUEST:\n      return {\n        loading: true\n      };\n\n    // On success\n    // loading will be done, so false\n    case PRODUCT_CREATE_REVIEW_SUCCESS:\n      return {\n        loading: false,\n        success: true\n      };\n\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n    case PRODUCT_CREATE_REVIEW_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n    case PRODUCT_CREATE_REVIEW_RESET:\n      return {};\n\n    // In any other case, just return the state\n    default:\n      return state;\n  }\n};\n// productTopRatedReducer\nexport const productTopRatedReducer = (state = {\n  products: []\n}, action) => {\n  switch (action.type) {\n    // loading will NOT be done yet, so true\n    case PRODUCT_TOP_REQUEST:\n      return {\n        loading: true,\n        products: []\n      };\n\n    // On success\n    // loading will be done, so false\n    case PRODUCT_TOP_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload\n      };\n\n    // On fail\n    // the error will contain the payload\n    // loading will be done, so false\n    case PRODUCT_TOP_FAIL:\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    // In any other case, just return the state\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DELETE_REQUEST","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","PRODUCT_CREATE_FAIL","PRODUCT_CREATE_RESET","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","PRODUCT_UPDATE_FAIL","PRODUCT_UPDATE_RESET","PRODUCT_CREATE_REVIEW_REQUEST","PRODUCT_CREATE_REVIEW_SUCCESS","PRODUCT_CREATE_REVIEW_FAIL","PRODUCT_CREATE_REVIEW_RESET","PRODUCT_TOP_REQUEST","PRODUCT_TOP_SUCCESS","PRODUCT_TOP_FAIL","productListReducer","state","products","action","type","loading","payload","pages","page","error","productDetailsReducer","product","reviews","productDeleteReducer","success","productCreateReducer","productUpdateReducer","productReviewCreateReducer","productTopRatedReducer"],"sources":["C:/Users/badit/ECOMNEW/react-complete-e-commerce/frontend/src/reducers/productReducers.js"],"sourcesContent":["import {\r\n\tPRODUCT_LIST_REQUEST,\r\n\tPRODUCT_LIST_SUCCESS,\r\n\tPRODUCT_LIST_FAIL,\r\n\tPRODUCT_DETAILS_REQUEST,\r\n\tPRODUCT_DETAILS_SUCCESS,\r\n\tPRODUCT_DETAILS_FAIL,\r\n\tPRODUCT_DELETE_REQUEST,\r\n\tPRODUCT_DELETE_SUCCESS,\r\n\tPRODUCT_DELETE_FAIL,\r\n\tPRODUCT_CREATE_REQUEST,\r\n\tPRODUCT_CREATE_SUCCESS,\r\n\tPRODUCT_CREATE_FAIL,\r\n\tPRODUCT_CREATE_RESET,\r\n\tPRODUCT_UPDATE_REQUEST,\r\n\tPRODUCT_UPDATE_SUCCESS,\r\n\tPRODUCT_UPDATE_FAIL,\r\n\tPRODUCT_UPDATE_RESET,\r\n\tPRODUCT_CREATE_REVIEW_REQUEST,\r\n\tPRODUCT_CREATE_REVIEW_SUCCESS,\r\n\tPRODUCT_CREATE_REVIEW_FAIL,\r\n\tPRODUCT_CREATE_REVIEW_RESET,\r\n\tPRODUCT_TOP_REQUEST,\r\n\tPRODUCT_TOP_SUCCESS,\r\n\tPRODUCT_TOP_FAIL,\r\n} from '../constants/productConstants'\r\n\r\n// productListReducer for all products\r\nexport const productListReducer = (state = { products: [] }, action) => {\r\n\tswitch (action.type) {\r\n\t\t// Requests product list\r\n\t\t// products is an empty array because its still loading\r\n\t\t// loading will NOT be done yet, so true\r\n\t\tcase PRODUCT_LIST_REQUEST:\r\n\t\t\treturn { loading: true, products: [] }\r\n\r\n\t\t// On success\r\n\t\t// products will contain data as a payload\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_LIST_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\tproducts: action.payload.products,\r\n\t\t\t\tpages: action.payload.pages,\r\n\t\t\t\tpage: action.payload.page,\r\n\t\t\t}\r\n\r\n\t\t// On fail\r\n\t\t// products will contain the error as a payload\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_LIST_FAIL:\r\n\t\t\treturn { loading: false, error: action.payload }\r\n\r\n\t\t// In any other case, just return the state\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n// productDetailsReducer for a single product\r\nexport const productDetailsReducer = (\r\n\tstate = { product: { reviews: [] } },\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\t\t// Requests a product\r\n\t\t// product is an empty object because its still loading\r\n\t\t// reviews is an empty array because its still loading\r\n\t\t// loading will NOT be done yet, so true\r\n\t\t// add contents of state using a spread operator (...)\r\n\t\tcase PRODUCT_DETAILS_REQUEST:\r\n\t\t\treturn { loading: true, ...state }\r\n\r\n\t\t// On success\r\n\t\t// product will contain data as a payload\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_DETAILS_SUCCESS:\r\n\t\t\treturn { loading: false, product: action.payload }\r\n\r\n\t\t// On fail\r\n\t\t// product will contain the error as a payload\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_DETAILS_FAIL:\r\n\t\t\treturn { loading: false, error: action.payload }\r\n\r\n\t\t// In any other case, just return the state\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n// productDeleteReducer for admin users\r\nexport const productDeleteReducer = (state = {}, action) => {\r\n\tswitch (action.type) {\r\n\t\t// loading will NOT be done yet, so true\r\n\t\tcase PRODUCT_DELETE_REQUEST:\r\n\t\t\treturn { loading: true }\r\n\r\n\t\t// On success\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_DELETE_SUCCESS:\r\n\t\t\treturn { loading: false, success: true }\r\n\r\n\t\t// On fail\r\n\t\t// the error will contain the payload\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_DELETE_FAIL:\r\n\t\t\treturn { loading: false, error: action.payload }\r\n\r\n\t\t// In any other case, just return the state\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n// productCreateReducer for admin users\r\nexport const productCreateReducer = (state = {}, action) => {\r\n\tswitch (action.type) {\r\n\t\t// loading will NOT be done yet, so true\r\n\t\tcase PRODUCT_CREATE_REQUEST:\r\n\t\t\treturn { loading: true }\r\n\r\n\t\t// On success\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_CREATE_SUCCESS:\r\n\t\t\treturn { loading: false, success: true, product: action.payload }\r\n\r\n\t\t// On fail\r\n\t\t// the error will contain the payload\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_CREATE_FAIL:\r\n\t\t\treturn { loading: false, error: action.payload }\r\n\r\n\t\tcase PRODUCT_CREATE_RESET:\r\n\t\t\treturn {}\r\n\r\n\t\t// In any other case, just return the state\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n// productUpdateReducer for admin users\r\nexport const productUpdateReducer = (state = { product: {} }, action) => {\r\n\tswitch (action.type) {\r\n\t\t// loading will NOT be done yet, so true\r\n\t\tcase PRODUCT_UPDATE_REQUEST:\r\n\t\t\treturn { loading: true }\r\n\r\n\t\t// On success\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_UPDATE_SUCCESS:\r\n\t\t\treturn { loading: false, success: true, product: action.payload }\r\n\r\n\t\t// On fail\r\n\t\t// the error will contain the payload\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_UPDATE_FAIL:\r\n\t\t\treturn { loading: false, error: action.payload }\r\n\r\n\t\tcase PRODUCT_UPDATE_RESET:\r\n\t\t\treturn { product: {} }\r\n\r\n\t\t// In any other case, just return the state\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n// productReviewCreateReducer for logged in users\r\nexport const productReviewCreateReducer = (state = {}, action) => {\r\n\tswitch (action.type) {\r\n\t\t// loading will NOT be done yet, so true\r\n\t\tcase PRODUCT_CREATE_REVIEW_REQUEST:\r\n\t\t\treturn { loading: true }\r\n\r\n\t\t// On success\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_CREATE_REVIEW_SUCCESS:\r\n\t\t\treturn { loading: false, success: true }\r\n\r\n\t\t// On fail\r\n\t\t// the error will contain the payload\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_CREATE_REVIEW_FAIL:\r\n\t\t\treturn { loading: false, error: action.payload }\r\n\r\n\t\tcase PRODUCT_CREATE_REVIEW_RESET:\r\n\t\t\treturn {}\r\n\r\n\t\t// In any other case, just return the state\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n// productTopRatedReducer\r\nexport const productTopRatedReducer = (state = { products: [] }, action) => {\r\n\tswitch (action.type) {\r\n\t\t// loading will NOT be done yet, so true\r\n\t\tcase PRODUCT_TOP_REQUEST:\r\n\t\t\treturn { loading: true, products: [] }\r\n\r\n\t\t// On success\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_TOP_SUCCESS:\r\n\t\t\treturn { loading: false, products: action.payload }\r\n\r\n\t\t// On fail\r\n\t\t// the error will contain the payload\r\n\t\t// loading will be done, so false\r\n\t\tcase PRODUCT_TOP_FAIL:\r\n\t\t\treturn { loading: false, error: action.payload }\r\n\r\n\t\t// In any other case, just return the state\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}